// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//----------------------------------------------------
// user
model User{
  id                  Int       @id @default(autoincrement()) // primary key
  user_nickname       String    @unique
  user_email          String    
  user_password       String
  createdAt           DateTime  @default(now())  
  updatedAt           DateTime  @updatedAt
  products            Product[]
  likes               Like[]
  articles            Article[]
  comments            Comment[]

}


// ----------------------------------------------------
// product
model Like { // joined table between Product and Users
  id                  Int           @id @default(autoincrement())
  like_count          Int 
  user_id             Int
  users               User           @relation(fields: [user_id],references: [id])
  product_id          Int
  products            Product         @relation(fields: [product_id],references: [id])
  @@unique([user_id, product_id])
}

model Product {
  id                  Int                 @id @default(autoincrement())
  product_name        String 
  product_description String
  product_price       Int
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  author_id           Int           
  author              User                @relation(fields: [author_id],references: [id])
  tags                Tags[]
  Product_tag         Product_tag[]
  like                Like[]
  comments            Comment[]
}

model Product_tag { // joinned table between Product and tags
  id              Int           @id @default(autoincrement())
  products        Product       @relation(fields: [product_id], references: [id])
  product_id      Int  
  tags            Tags          @relation(fields: [tag_id], references: [id])
  tag_id         Int 
  @@unique([product_id, tag_id])
}

model Tags {
  id                Int           @id @default(autoincrement())
  tag_name          String
  Product_tag       Product_tag[]
  Product           Product[]
}

//------------------------------------------------------
// article
model Article{
  id          Int             @id @default(autoincrement())
  title       String
  content     String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  author_id   Int   
  author      User          @relation(fields: [author_id], references: [id])
  comments    Comment[]
}

//------------------------------------------------------
// comment
model Comment{
  id            Int              @id @default(autoincrement())
  content       String   
  author_id     Int           
  author        User            @relation(fields: [author_id], references: [id])   
  product_id    Int    
  products      Product         @relation(fields: [product_id],references: [id])
  article_id    Int  
  article       Article         @relation(fields: [article_id], references: [id])
}



